!function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){var i;
/*!
 * fullPage 3.0.4
 * https://github.com/alvarotrigo/fullPage.js
 *
 * @license GPLv3 for open source use only
 * or Fullpage Commercial License for commercial use
 * http://alvarotrigo.com/fullPage/pricing/
 *
 * Copyright (C) 2018 http://alvarotrigo.com/fullPage - A project by Alvaro Trigo
 */
/*!
 * fullPage 3.0.4
 * https://github.com/alvarotrigo/fullPage.js
 *
 * @license GPLv3 for open source use only
 * or Fullpage Commercial License for commercial use
 * http://alvarotrigo.com/fullPage/pricing/
 *
 * Copyright (C) 2018 http://alvarotrigo.com/fullPage - A project by Alvaro Trigo
 */
!function(a,o,r,s,l){void 0===(i=function(){return a.fullpage=s(o,r),a.fullpage}.call(t,n,t,e))||(e.exports=i)}(this,window,document,function(e,t){"use strict";var n="fullpage-wrapper",i="."+n,a="fp-responsive",o="fp-notransition",r="fp-destroyed",s="fp-enabled",l="fp-viewing",c="active",u="."+c,d="fp-completely",v="."+d,f=".section",p="fp-section",m="."+p,h=m+u,g="fp-tableCell",b="."+g,y="fp-auto-height",w="fp-normal-scroll",x="fp-nav",_="#"+x,S="fp-tooltip",k="."+S,E="fp-show-active",L=".slide",A="fp-slide",M="."+A,T=M+u,z="fp-slides",O="."+z,R="fp-slidesContainer",P="."+R,j="fp-table",I="fp-slidesNav",C="."+I,F=C+" a",B=".fp-controlArrow",H="fp-prev",q="fp-controlArrow "+H,D=B+("."+H),N="fp-controlArrow fp-next",Y=B+".fp-next";function U(t,n){e.console&&e.console[t]&&e.console[t]("fullPage: "+n)}function X(e,n){return(n=arguments.length>1?n:t)?n.querySelectorAll(e):null}function W(e){e=e||{};for(var t=1,n=arguments.length;t<n;++t){var i=arguments[t];if(i)for(var a in i)i.hasOwnProperty(a)&&("[object Object]"!==Object.prototype.toString.call(i[a])?e[a]=i[a]:e[a]=W(e[a],i[a]))}return e}function V(e,t){return null!=e&&(e.classList?e.classList.contains(t):new RegExp("(^| )"+t+"( |$)","gi").test(e.className))}function J(){return"innerHeight"in e?e.innerHeight:t.documentElement.offsetHeight}function K(e,t){var n;for(n in e=ie(e),t)if(t.hasOwnProperty(n)&&null!==n)for(var i=0;i<e.length;i++){e[i].style[n]=t[n]}return e}function $(e,t,n){for(var i=e[n];i&&!Se(i,t);)i=i[n];return i}function G(e,t){return $(e,t,"previousElementSibling")}function Q(e,t){return $(e,t,"nextElementSibling")}function Z(e){return e.previousElementSibling}function ee(e){return e.nextElementSibling}function te(e){return e[e.length-1]}function ne(e,t){e=re(e)?e[0]:e;for(var n=null!=t?X(t,e.parentNode):e.parentNode.childNodes,i=0,a=0;a<n.length;a++){if(n[a]==e)return i;1==n[a].nodeType&&i++}return-1}function ie(e){return re(e)?e:[e]}function ae(e){e=ie(e);for(var t=0;t<e.length;t++)e[t].style.display="none";return e}function oe(e){e=ie(e);for(var t=0;t<e.length;t++)e[t].style.display="block";return e}function re(e){return"[object Array]"===Object.prototype.toString.call(e)||"[object NodeList]"===Object.prototype.toString.call(e)}function se(e,t){e=ie(e);for(var n=0;n<e.length;n++){var i=e[n];i.classList?i.classList.add(t):i.className+=" "+t}return e}function le(e,t){e=ie(e);for(var n=t.split(" "),i=0;i<n.length;i++){t=n[i];for(var a=0;a<e.length;a++){var o=e[a];o.classList?o.classList.remove(t):o.className=o.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}}return e}function ce(e,t){t.appendChild(e)}function ue(e,n,i){var a;n=n||t.createElement("div");for(var o=0;o<e.length;o++){var r=e[o];(i&&!o||!i)&&(a=n.cloneNode(!0),r.parentNode.insertBefore(a,r)),a.appendChild(r)}return e}function de(e,t){ue(e,t,!0)}function ve(e,t){for("string"==typeof t&&(t=Ee(t)),e.appendChild(t);e.firstChild!==t;)t.appendChild(e.firstChild)}function fe(e){for(var n=t.createDocumentFragment();e.firstChild;)n.appendChild(e.firstChild);e.parentNode.replaceChild(n,e)}function pe(e,t){return e&&1===e.nodeType?Se(e,t)?e:pe(e.parentNode,t):null}function me(e,t){ge(e,e.nextSibling,t)}function he(e,t){ge(e,e,t)}function ge(e,t,n){re(n)||("string"==typeof n&&(n=Ee(n)),n=[n]);for(var i=0;i<n.length;i++)e.parentNode.insertBefore(n[i],t)}function be(){var n=t.documentElement;return(e.pageYOffset||n.scrollTop)-(n.clientTop||0)}function ye(e){return Array.prototype.filter.call(e.parentNode.children,function(t){return t!==e})}function we(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function xe(e){if("function"==typeof e)return!0;var t=Object.prototype.toString(e);return"[object Function]"===t||"[object GeneratorFunction]"===t}function _e(n,i,a){var o;a=void 0===a?{}:a,"function"==typeof e.CustomEvent?o=new CustomEvent(i,{detail:a}):(o=t.createEvent("CustomEvent")).initCustomEvent(i,!0,!0,a),n.dispatchEvent(o)}function Se(e,t){return(e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector).call(e,t)}function ke(e,t){if("boolean"==typeof t)for(var n=0;n<e.length;n++)e[n].style.display=t?"block":"none";return e}function Ee(e){var n=t.createElement("div");return n.innerHTML=e.trim(),n.firstChild}function Le(e){e=ie(e);for(var t=0;t<e.length;t++){var n=e[t];n&&n.parentElement&&n.parentNode.removeChild(n)}}function Ae(e,t,n){for(var i=e[n],a=[];i;)(Se(i,t)||null==t)&&a.push(i),i=i[n];return a}function Me(e,t){return Ae(e,t,"nextElementSibling")}function Te(e,t){return Ae(e,t,"previousElementSibling")}return e.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=function(t,n){n=n||e;for(var i=0;i<this.length;i++)t.call(n,this[i],i,this)}),e.fp_utils={$:X,deepExtend:W,hasClass:V,getWindowHeight:J,css:K,until:$,prevUntil:G,nextUntil:Q,prev:Z,next:ee,last:te,index:ne,getList:ie,hide:ae,show:oe,isArrayOrList:re,addClass:se,removeClass:le,appendTo:ce,wrap:ue,wrapAll:de,wrapInner:ve,unwrap:fe,closest:pe,after:me,before:he,insertBefore:ge,getScrollTop:be,siblings:ye,preventDefault:we,isFunction:xe,trigger:_e,matches:Se,toggle:ke,createElementFromHTML:Ee,remove:Le,filter:function(e,t){Array.prototype.filter.call(e,t)},untilAll:Ae,nextAll:Me,prevAll:Te,showError:U},function($,ie){var re=ie&&new RegExp("([\\d\\w]{8}-){3}[\\d\\w]{8}|^(?=.*?[A-Y])(?=.*?[a-y])(?=.*?[0-8])(?=.*?[#?!@$%^&*-]).{8,}$").test(ie.licenseKey)||t.domain.indexOf("alvarotrigo.com")>-1;if(!V(X("html"),s)){var ue=X("html, body"),ge=X("body")[0],Ae={};ie=W({menu:!1,anchors:[],lockAnchors:!1,navigation:!1,navigationPosition:"right",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,hybrid:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easing:"easeInOutCubic",easingcss3:"ease",loopBottom:!1,loopTop:!1,loopHorizontal:!0,continuousVertical:!1,continuousHorizontal:!1,scrollHorizontally:!1,interlockedSlides:!1,dragAndMove:!1,offsetSections:!1,resetSliders:!1,fadingEffect:!1,normalScrollElements:null,scrollOverflow:!1,scrollOverflowReset:!1,scrollOverflowHandler:e.fp_scrolloverflow?e.fp_scrolloverflow.iscrollHandler:null,scrollOverflowOptions:null,touchSensitivity:5,normalScrollElementTouchThreshold:5,bigSectionsDestination:null,keyboardScrolling:!0,animateAnchor:!0,recordHistory:!0,controlArrows:!0,controlArrowColor:"#fff",verticalCentered:!0,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,responsiveWidth:0,responsiveHeight:0,responsiveSlides:!1,parallax:!1,parallaxOptions:{type:"reveal",percentage:62,property:"translate"},sectionSelector:f,slideSelector:L,v2compatible:!1,afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null,afterResponsive:null,lazyLoading:!0},ie);var ze,Oe,Re,Pe,je=!1,Ie=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),Ce="ontouchstart"in e||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints,Fe="string"==typeof $?X($)[0]:$,Be=J(),He=!1,qe=!0,De=!0,Ne=[],Ye={m:{up:!0,down:!0,left:!0,right:!0}};Ye.k=W({},Ye.m);var Ue,Xe,We,Ve,Je,Ke,$e,Ge,Qe=e.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"},Ze={touchmove:"ontouchmove"in e?"touchmove":Qe.move,touchstart:"ontouchstart"in e?"touchstart":Qe.down},et='a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]',tt=W({},ie),nt=!1;Dn(),e.fp_easings=W(e.fp_easings,{easeInOutCubic:function(e,t,n,i){return(e/=i/2)<1?n/2*e*e*e+t:n/2*((e-=2)*e*e+2)+t}}),Fe&&(Ae.version="3.0.2",Ae.setAutoScrolling=ft,Ae.setRecordHistory=pt,Ae.setScrollingSpeed=mt,Ae.setFitToSection=ht,Ae.setLockAnchors=function(e){ie.lockAnchors=e},Ae.setMouseWheelScrolling=gt,Ae.setAllowScrolling=bt,Ae.setKeyboardScrolling=wt,Ae.moveSectionUp=xt,Ae.moveSectionDown=_t,Ae.silentMoveTo=St,Ae.moveTo=kt,Ae.moveSlideRight=Et,Ae.moveSlideLeft=Lt,Ae.fitToSection=Bt,Ae.reBuild=At,Ae.setResponsive=Mt,Ae.getFullpageData=ie,Ae.destroy=function(n){ft(!1,"internal"),bt(!0),yt(!1),wt(!1),se(Fe,r),clearTimeout(Ve),clearTimeout(We),clearTimeout(Xe),clearTimeout(Je),clearTimeout(Ke),e.removeEventListener("scroll",Ft),e.removeEventListener("hashchange",ln),e.removeEventListener("resize",yn),t.removeEventListener("keydown",un),t.removeEventListener("keyup",dn),["click","touchstart"].forEach(function(e){t.removeEventListener(e,Tt)}),["mouseenter","touchstart","mouseleave","touchend"].forEach(function(e){t.removeEventListener(e,Ot,!0)}),clearTimeout(Ve),clearTimeout(We),n&&(Fn(0),X("img[data-src], source[data-src], audio[data-src], iframe[data-src]",Fe).forEach(function(e){en(e,"src")}),X("img[data-srcset]").forEach(function(e){en(e,"srcset")}),Le(X(_+", "+C+", "+B)),K(X(m),{height:"","background-color":"",padding:""}),K(X(M),{width:""}),K(Fe,{height:"",position:"","-ms-touch-action":"","touch-action":""}),K(ue,{overflow:"",height:""}),le(X("html"),s),le(ge,a),ge.className.split(/\s+/).forEach(function(e){0===e.indexOf(l)&&le(ge,e)}),X(m+", "+M).forEach(function(e){ie.scrollOverflowHandler&&ie.scrollOverflow&&ie.scrollOverflowHandler.remove(e),le(e,j+" "+c+" "+d);var t=e.getAttribute("data-fp-styles");t&&e.setAttribute("style",e.getAttribute("data-fp-styles")),V(e,p)&&!nt&&e.removeAttribute("data-anchor")}),_n(Fe),[b,P,O].forEach(function(e){X(e,Fe).forEach(function(e){fe(e)})}),K(Fe,{"-webkit-transition":"none",transition:"none"}),e.scrollTo(0,0),[p,A,R].forEach(function(e){le(X("."+e),e)}))},Ae.getActiveSection=function(){return new Xn(X(h)[0])},Ae.getActiveSlide=function(){return Gt(X(T,X(h)[0])[0])},Ae.test={top:"0px",translate3d:"translate3d(0px, 0px, 0px)",translate3dH:function(){for(var e=[],t=0;t<X(ie.sectionSelector,Fe).length;t++)e.push("translate3d(0px, 0px, 0px)");return e}(),left:function(){for(var e=[],t=0;t<X(ie.sectionSelector,Fe).length;t++)e.push(0);return e}(),options:ie,setAutoScrolling:ft},Ae.shared={afterRenderActions:Ct},e.fullpage_api=Ae,ie.css3&&(ie.css3=function(){var n,i=t.createElement("p"),a={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(var o in i.style.display="block",t.body.insertBefore(i,null),a)void 0!==i.style[o]&&(i.style[o]="translate3d(1px,1px,1px)",n=e.getComputedStyle(i).getPropertyValue(a[o]));return t.body.removeChild(i),void 0!==n&&n.length>0&&"none"!==n}()),ie.scrollBar=ie.scrollBar||ie.hybrid,function(){if(!ie.anchors.length){var e="[data-anchor]",t=X(ie.sectionSelector.split(",").join(e+",")+e,Fe);t.length&&(nt=!0,t.forEach(function(e){ie.anchors.push(e.getAttribute("data-anchor").toString())}))}if(!ie.navigationTooltips.length){var e="[data-tooltip]",n=X(ie.sectionSelector.split(",").join(e+",")+e,Fe);n.length&&n.forEach(function(e){ie.navigationTooltips.push(e.getAttribute("data-tooltip").toString())})}}(),function(){K(Fe,{height:"100%",position:"relative"}),se(Fe,n),se(X("html"),s),Be=J(),le(Fe,r),se(X(ie.sectionSelector,Fe),p),se(X(ie.slideSelector,Fe),A);for(var e=X(m),i=0;i<e.length;i++){var a=i,o=e[i],l=X(M,o),u=l.length;o.setAttribute("data-fp-styles",o.getAttribute("style")),Pt(o,a),jt(o,a),u>0?Rt(o,l,u):ie.verticalCentered&&En(o)}ie.fixedElements&&ie.css3&&X(ie.fixedElements).forEach(function(e){ge.appendChild(e)}),ie.navigation&&function(){var e=t.createElement("div");e.setAttribute("id",x);var n=t.createElement("ul");e.appendChild(n),ce(e,ge);var i=X(_)[0];se(i,"fp-"+ie.navigationPosition),ie.showActiveTooltip&&se(i,E);for(var a="",o=0;o<X(m).length;o++){var r="";ie.anchors.length&&(r=ie.anchors[o]),a+='<li><a href="#'+r+'"><span class="fp-sr-only">'+It(o,"Section")+"</span><span></span></a>";var s=ie.navigationTooltips[o];void 0!==s&&""!==s&&(a+='<div class="'+S+" fp-"+ie.navigationPosition+'">'+s+"</div>"),a+="</li>"}X("ul",i)[0].innerHTML=a,K(X(_),{"margin-top":"-"+X(_)[0].offsetHeight/2+"px"});var l=X("li",X(_)[0])[ne(X(h)[0],m)];se(X("a",l),c)}(),X('iframe[src*="youtube.com/embed/"]',Fe).forEach(function(e){var t,n,i;n="enablejsapi=1",i=(t=e).getAttribute("src"),t.setAttribute("src",i+(/\?/.test(i)?"&":"?")+n)}),ie.scrollOverflow&&(Ue=ie.scrollOverflowHandler.init(ie))}(),bt(!0),yt(!0),ft(ie.autoScrolling,"internal"),wn(),jn(),"complete"===t.readyState&&sn(),e.addEventListener("load",sn),ie.scrollOverflow||Ct(),e.addEventListener("scroll",Ft),e.addEventListener("hashchange",ln),e.addEventListener("blur",mn),e.addEventListener("resize",yn),t.addEventListener("keydown",un),t.addEventListener("keyup",dn),["click","touchstart"].forEach(function(e){t.addEventListener(e,Tt)}),ie.normalScrollElements&&(["mouseenter","touchstart"].forEach(function(e){zt(e,!1)}),["mouseleave","touchend"].forEach(function(e){zt(e,!0)})));var it=!1,at=0,ot=0,rt=0,st=0,lt=0,ct=(new Date).getTime(),ut=0,dt=0,vt=Be;return Ae}function ft(e,t){e||Fn(0),qn("autoScrolling",e,t);var n=X(h)[0];if(ie.autoScrolling&&!ie.scrollBar)K(ue,{overflow:"hidden",height:"100%"}),pt(tt.recordHistory,"internal"),K(Fe,{"-ms-touch-action":"none","touch-action":"none"}),null!=n&&Fn(n.offsetTop);else if(K(ue,{overflow:"visible",height:"initial"}),pt(!1,"internal"),K(Fe,{"-ms-touch-action":"","touch-action":""}),null!=n){var i=Qt(n.offsetTop);i.element.scrollTo(0,i.options)}}function pt(e,t){qn("recordHistory",e,t)}function mt(e,t){qn("scrollingSpeed",e,t)}function ht(e,t){qn("fitToSection",e,t)}function gt(n){n?(function(){var n,i="";e.addEventListener?n="addEventListener":(n="attachEvent",i="on");var a="onwheel"in t.createElement("div")?"wheel":void 0!==t.onmousewheel?"mousewheel":"DOMMouseScroll";"DOMMouseScroll"==a?t[n](i+"MozMousePixelScroll",Xt,!1):t[n](i+a,Xt,!1)}(),Fe.addEventListener("mousedown",vn),Fe.addEventListener("mouseup",fn)):(t.addEventListener?(t.removeEventListener("mousewheel",Xt,!1),t.removeEventListener("wheel",Xt,!1),t.removeEventListener("MozMousePixelScroll",Xt,!1)):t.detachEvent("onmousewheel",Xt),Fe.removeEventListener("mousedown",vn),Fe.removeEventListener("mouseup",fn))}function bt(e,t){void 0!==t?(t=t.replace(/ /g,"").split(",")).forEach(function(t){Hn(e,t,"m")}):Hn(e,"all","m")}function yt(e){e?(gt(!0),function(){if(Ie||Ce){ie.autoScrolling&&(ge.removeEventListener(Ze.touchmove,qt,{passive:!1}),ge.addEventListener(Ze.touchmove,qt,{passive:!1}));var e=X(i)[0];e&&(e.removeEventListener(Ze.touchstart,Yt),e.removeEventListener(Ze.touchmove,Dt,{passive:!1}),e.addEventListener(Ze.touchstart,Yt),e.addEventListener(Ze.touchmove,Dt,{passive:!1}))}}()):(gt(!1),function(){if(Ie||Ce){ie.autoScrolling&&(ge.removeEventListener(Ze.touchmove,Dt,{passive:!1}),ge.removeEventListener(Ze.touchmove,qt,{passive:!1}));var e=X(i)[0];e&&(e.removeEventListener(Ze.touchstart,Yt),e.removeEventListener(Ze.touchmove,Dt,{passive:!1}))}}())}function wt(e,t){void 0!==t?(t=t.replace(/ /g,"").split(",")).forEach(function(t){Hn(e,t,"k")}):(Hn(e,"all","k"),ie.keyboardScrolling=e)}function xt(){var e=G(X(h)[0],m);e||!ie.loopTop&&!ie.continuousVertical||(e=te(X(m))),null!=e&&Jt(e,null,!0)}function _t(){var e=Q(X(h)[0],m);e||!ie.loopBottom&&!ie.continuousVertical||(e=X(m)[0]),null!=e&&Jt(e,null,!1)}function St(e,t){mt(0,"internal"),kt(e,t),mt(tt.scrollingSpeed,"internal")}function kt(e,t){var n=Mn(e);void 0!==t?Tn(e,t):null!=n&&Jt(n)}function Et(e){Wt("right",e)}function Lt(e){Wt("left",e)}function At(t){if(!V(Fe,r)){He=!0,Be=J();for(var n=X(m),i=0;i<n.length;++i){var a=n[i],o=X(O,a)[0],s=X(M,a);ie.verticalCentered&&K(X(b,a),{height:Ln(a)+"px"}),K(a,{height:Be+"px"}),s.length>1&&gn(o,X(T,o)[0])}ie.scrollOverflow&&Ue.createScrollBarForAll();var l=ne(X(h)[0],m);l&&St(l+1),He=!1,xe(ie.afterResize)&&t&&ie.afterResize.call(Fe,e.innerWidth,e.innerHeight),xe(ie.afterReBuild)&&!t&&ie.afterReBuild.call(Fe)}}function Mt(e){var t=V(ge,a);e?t||(ft(!1,"internal"),ht(!1,"internal"),ae(X(_)),se(ge,a),xe(ie.afterResponsive)&&ie.afterResponsive.call(Fe,e)):t&&(ft(tt.autoScrolling,"internal"),ht(tt.autoScrolling,"internal"),oe(X(_)),le(ge,a),xe(ie.afterResponsive)&&ie.afterResponsive.call(Fe,e))}function Tt(e){var t=e.target;t&&pe(t,_+" a")?function(e){we(e);var t=ne(pe(this,_+" li"));Jt(X(m)[t])}.call(t,e):Se(t,k)?function(){_e(Z(this),"click")}.call(t):Se(t,B)?function(){var e=pe(this,m);V(this,H)?Ye.m.left&&Lt(e):Ye.m.right&&Et(e)}.call(t,e):Se(t,F)||null!=pe(t,F)?function(e){we(e);var t=X(O,pe(this,m))[0],n=X(M,t)[ne(pe(this,"li"))];gn(t,n)}.call(t,e):pe(t,ie.menu+" [data-menuanchor]")&&function(e){!X(ie.menu)[0]||!ie.lockAnchors&&ie.anchors.length||(we(e),kt(this.getAttribute("data-menuanchor")))}.call(t,e)}function zt(e,n){t["fp_"+e]=n,t.addEventListener(e,Ot,!0)}function Ot(e){e.target!=t&&ie.normalScrollElements.split(",").forEach(function(n){null!=pe(e.target,n)&&yt(t["fp_"+e.type])})}function Rt(e,n,i){var a=100*i,o=100/i,r=t.createElement("div");r.className=z,de(n,r);var s=t.createElement("div");s.className=R,de(n,s),K(X(P,e),{width:a+"%"}),i>1&&(ie.controlArrows&&function(e){var t=[Ee('<div class="'+q+'"></div>'),Ee('<div class="'+N+'"></div>')];me(X(O,e)[0],t),"#fff"!==ie.controlArrowColor&&(K(X(Y,e),{"border-color":"transparent transparent transparent "+ie.controlArrowColor}),K(X(D,e),{"border-color":"transparent "+ie.controlArrowColor+" transparent transparent"})),ie.loopHorizontal||ae(X(D,e))}(e),ie.slidesNavigation&&function(e,t){ce(Ee('<div class="'+I+'"><ul></ul></div>'),e);var n=X(C,e)[0];se(n,"fp-"+ie.slidesNavPosition);for(var i=0;i<t;i++)ce(Ee('<li><a href="#"><span class="fp-sr-only">'+It(i,"Slide")+"</span><span></span></a></li>"),X("ul",n)[0]);K(n,{"margin-left":"-"+n.innerWidth/2+"px"}),se(X("a",X("li",n)[0]),c)}(e,i)),n.forEach(function(e){K(e,{width:o+"%"}),ie.verticalCentered&&En(e)});var l=X(T,e)[0];null!=l&&(0!==ne(X(h),m)||0===ne(X(h),m)&&0!==ne(l))?Cn(l,"internal"):se(n[0],c)}function Pt(e,t){t||null!=X(h)[0]||se(e,c),Pe=X(h)[0],K(e,{height:Be+"px"}),ie.paddingTop&&K(e,{"padding-top":ie.paddingTop}),ie.paddingBottom&&K(e,{"padding-bottom":ie.paddingBottom}),void 0!==ie.sectionsColor[t]&&K(e,{"background-color":ie.sectionsColor[t]}),void 0!==ie.anchors[t]&&e.setAttribute("data-anchor",ie.anchors[t])}function jt(e,t){void 0!==ie.anchors[t]&&V(e,c)&&Sn(ie.anchors[t],t),ie.menu&&ie.css3&&null!=pe(X(ie.menu)[0],i)&&ge.appendChild(X(ie.menu)[0])}function It(e,t){return ie.navigationTooltips[e]||ie.anchors[e]||t+" "+(e+1)}function Ct(){var e,t=X(h)[0];se(t,d),tn(t),nn(t),ie.scrollOverflow&&ie.scrollOverflowHandler.afterLoad(),(!(e=Mn(cn().section))||void 0!==e&&ne(e)===ne(Pe))&&xe(ie.afterLoad)&&Kt("afterLoad",{activeSection:null,element:t,direction:null,anchorLink:t.getAttribute("data-anchor"),sectionIndex:ne(t,m)}),xe(ie.afterRender)&&Kt("afterRender")}function Ft(){var e,t,n,i;if(!ie.autoScrolling||ie.scrollBar){var a=be(),o=function(e){var t=e>at?"down":"up";return at=e,ut=e,t}(a),r=0,s=a+J()/2,l=ge.offsetHeight-J()===a,u=X(m);if(l)r=u.length-1;else if(a)for(var v=0;v<u.length;++v)u[v].offsetTop<=s&&(r=v);else r=0;if(t=o,n=X(h)[0].offsetTop,i=n+J(),("up"==t?i>=be()+J():n<=be())&&(V(X(h)[0],d)||(se(X(h)[0],d),le(ye(X(h)[0]),d))),!V(e=u[r],c)){it=!0;var f,p,g=X(h)[0],b=ne(g,m)+1,y=kn(e),w=e.getAttribute("data-anchor"),x=ne(e,m)+1,_=X(T,e)[0],S={activeSection:g,sectionIndex:x-1,anchorLink:w,element:e,leavingSection:b,direction:y};_&&(p=_.getAttribute("data-anchor"),f=ne(_)),De&&(se(e,c),le(ye(e),c),xe(ie.onLeave)&&Kt("onLeave",S),xe(ie.afterLoad)&&Kt("afterLoad",S),on(g),tn(e),nn(e),Sn(w,x-1),ie.anchors.length&&(ze=w),On(f,p,w)),clearTimeout(Je),Je=setTimeout(function(){it=!1},100)}ie.fitToSection&&(clearTimeout(Ke),Ke=setTimeout(function(){ie.fitToSection&&X(h)[0].offsetHeight<=Be&&Bt()},ie.fitToSectionDelay))}}function Bt(){De&&(He=!0,Jt(X(h)[0]),He=!1)}function Ht(e){if(Ye.m[e]){var t="down"===e?_t:xt;if(ie.scrollOverflow){var n=ie.scrollOverflowHandler.scrollable(X(h)[0]),i="down"===e?"bottom":"top";if(null!=n){if(!ie.scrollOverflowHandler.isScrolled(i,n))return!0;t()}else t()}else t()}}function qt(e){ie.autoScrolling&&Nt(e)&&we(e)}function Dt(t){var n=pe(t.target,m);if(Nt(t)){ie.autoScrolling&&we(t);var i=In(t);st=i.y,lt=i.x,X(O,n).length&&Math.abs(rt-lt)>Math.abs(ot-st)?!je&&Math.abs(rt-lt)>e.innerWidth/100*ie.touchSensitivity&&(rt>lt?Ye.m.right&&Et(n):Ye.m.left&&Lt(n)):ie.autoScrolling&&De&&Math.abs(ot-st)>e.innerHeight/100*ie.touchSensitivity&&(ot>st?Ht("down"):st>ot&&Ht("up"))}}function Nt(e){return void 0===e.pointerType||"mouse"!=e.pointerType}function Yt(e){if(ie.fitToSection&&(Ge=!1),Nt(e)){var t=In(e);ot=t.y,rt=t.x}}function Ut(e,t){for(var n=0,i=e.slice(Math.max(e.length-t,1)),a=0;a<i.length;a++)n+=i[a];return Math.ceil(n/t)}function Xt(t){var n=(new Date).getTime(),i=V(X(v)[0],w);if(!Ye.m.down&&!Ye.m.up)return we(t),!1;if(ie.autoScrolling&&!Re&&!i){var a=(t=t||e.event).wheelDelta||-t.deltaY||-t.detail,o=Math.max(-1,Math.min(1,a)),r=void 0!==t.wheelDeltaX||void 0!==t.deltaX,s=Math.abs(t.wheelDeltaX)<Math.abs(t.wheelDelta)||Math.abs(t.deltaX)<Math.abs(t.deltaY)||!r;Ne.length>149&&Ne.shift(),Ne.push(Math.abs(a)),ie.scrollBar&&we(t);var l=n-ct;return ct=n,l>200&&(Ne=[]),De&&Ut(Ne,10)>=Ut(Ne,70)&&s&&Ht(o<0?"down":"up"),!1}ie.fitToSection&&(Ge=!1)}function Wt(e,t){var n=null==t?X(h)[0]:t,i=X(O,n)[0];if(!(null==i||je||X(M,i).length<2)){var a=X(T,i)[0],o=null;if(null==(o="left"===e?G(a,M):Q(a,M))){if(!ie.loopHorizontal)return;var r=ye(a);o="left"===e?r[r.length-1]:r[0]}je=!Ae.test.isTesting,gn(i,o,e)}}function Vt(){for(var e=X(T),t=0;t<e.length;t++)Cn(e[t],"internal")}function Jt(e,t,n){if(null!=e){var i,a,o={element:e,callback:t,isMovementUp:n,dtop:function(e){var t=e.offsetHeight,n=e.offsetTop,i=n,a=n>ut,o=i-Be+t,r=ie.bigSectionsDestination;return t>Be?(a||r)&&"bottom"!==r||(i=o):(a||He&&null==ee(e))&&(i=o),ut=i,i}(e),yMovement:kn(e),anchorLink:e.getAttribute("data-anchor"),sectionIndex:ne(e,m),activeSlide:X(T,e)[0],activeSection:X(h)[0],leavingSection:ne(X(h),m)+1,localIsResizing:He};if(!(o.activeSection==e&&!He||ie.scrollBar&&be()===o.dtop&&!V(e,y))){if(null!=o.activeSlide&&(i=o.activeSlide.getAttribute("data-anchor"),a=ne(o.activeSlide)),!o.localIsResizing){var r=o.yMovement;if(void 0!==n&&(r=n?"up":"down"),o.direction=r,xe(ie.onLeave)&&!1===Kt("onLeave",o))return}ie.autoScrolling&&ie.continuousVertical&&void 0!==o.isMovementUp&&(!o.isMovementUp&&"up"==o.yMovement||o.isMovementUp&&"down"==o.yMovement)&&(o=function(e){return e.isMovementUp?he(X(h)[0],Me(e.activeSection,m)):me(X(h)[0],Te(e.activeSection,m).reverse()),Fn(X(h)[0].offsetTop),Vt(),e.wrapAroundElements=e.activeSection,e.dtop=e.element.offsetTop,e.yMovement=kn(e.element),e.leavingSection=ne(e.activeSection,m)+1,e.sectionIndex=ne(e.element,m),e}(o)),o.localIsResizing||on(o.activeSection),ie.scrollOverflow&&ie.scrollOverflowHandler.beforeLeave(),se(e,c),le(ye(e),c),tn(e),ie.scrollOverflow&&ie.scrollOverflowHandler.onLeave(),De=Ae.test.isTesting,On(a,i,o.anchorLink,o.sectionIndex),function(e){if(ie.css3&&ie.autoScrolling&&!ie.scrollBar){var t="translate3d(0px, -"+Math.round(e.dtop)+"px, 0px)";An(t,!0),ie.scrollingSpeed?(clearTimeout(We),We=setTimeout(function(){Zt(e)},ie.scrollingSpeed)):Zt(e)}else{var n=Qt(e.dtop);Ae.test.top=-e.dtop+"px",Nn(n.element,n.options,ie.scrollingSpeed,function(){ie.scrollBar?setTimeout(function(){Zt(e)},30):Zt(e)})}}(o),ze=o.anchorLink,Sn(o.anchorLink,o.sectionIndex)}}}function Kt(e,t){var n,i=function(e,t){var n;return(n=ie.v2compatible?{afterRender:function(){return[Fe]},onLeave:function(){return[t.activeSection,t.leavingSection,t.sectionIndex+1,t.direction]},afterLoad:function(){return[t.element,t.anchorLink,t.sectionIndex+1]},afterSlideLoad:function(){return[t.destiny,t.anchorLink,t.sectionIndex+1,t.slideAnchor,t.slideIndex]},onSlideLeave:function(){return[t.prevSlide,t.anchorLink,t.sectionIndex+1,t.prevSlideIndex,t.direction,t.slideIndex]}}:{afterRender:function(){return{section:$t(X(h)[0]),slide:Gt(X(T,X(h)[0])[0])}},onLeave:function(){return{origin:$t(t.activeSection),destination:$t(t.element),direction:t.direction}},afterLoad:function(){return n.onLeave()},afterSlideLoad:function(){return{section:$t(t.section),origin:Gt(t.prevSlide),destination:Gt(t.destiny),direction:t.direction}},onSlideLeave:function(){return n.afterSlideLoad()}})[e]()}(e,t);if(ie.v2compatible){if(!1===ie[e].apply(i[0],i.slice(1)))return!1}else if(_e(Fe,e,i),!1===ie[e].apply(i[Object.keys(i)[0]],(n=i,Object.keys(n).map(function(e){return n[e]}))))return!1;return!0}function $t(e){return e?new Xn(e):null}function Gt(e){return e?new Wn(e):null}function Qt(t){var n={};return ie.autoScrolling&&!ie.scrollBar?(n.options=-t,n.element=X(i)[0]):(n.options=t,n.element=e),n}function Zt(e){!function(e){null!=e.wrapAroundElements&&(e.isMovementUp?he(X(m)[0],e.wrapAroundElements):me(X(m)[X(m).length-1],e.wrapAroundElements),Fn(X(h)[0].offsetTop),Vt())}(e),xe(ie.afterLoad)&&!e.localIsResizing&&Kt("afterLoad",e),ie.scrollOverflow&&ie.scrollOverflowHandler.afterLoad(),e.localIsResizing||nn(e.element),se(e.element,d),le(ye(e.element),d),De=!0,xe(e.callback)&&e.callback()}function en(e,t){e.setAttribute(t,e.getAttribute("data-"+t)),e.removeAttribute("data-"+t)}function tn(e){ie.lazyLoading&&X("img[data-src], img[data-srcset], source[data-src], source[data-srcset], video[data-src], audio[data-src], iframe[data-src]",rn(e)).forEach(function(e){if(["src","srcset"].forEach(function(t){var n=e.getAttribute("data-"+t);null!=n&&n&&en(e,t)}),Se(e,"source")){var t=pe(e,"video, audio");t&&t.load()}})}function nn(e){var t=rn(e);X("video, audio",t).forEach(function(e){e.hasAttribute("data-autoplay")&&"function"==typeof e.play&&e.play()}),X('iframe[src*="youtube.com/embed/"]',t).forEach(function(e){e.hasAttribute("data-autoplay")&&an(e),e.onload=function(){e.hasAttribute("data-autoplay")&&an(e)}})}function an(e){e.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*")}function on(e){var t=rn(e);X("video, audio",t).forEach(function(e){e.hasAttribute("data-keepplaying")||"function"!=typeof e.pause||e.pause()}),X('iframe[src*="youtube.com/embed/"]',t).forEach(function(e){/youtube\.com\/embed\//.test(e.getAttribute("src"))&&!e.hasAttribute("data-keepplaying")&&e.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")})}function rn(e){var t=X(T,e);return t.length&&(e=t[0]),e}function sn(){var e=cn(),t=e.section,n=e.slide;t&&(ie.animateAnchor?Tn(t,n):St(t,n))}function ln(){if(!it&&!ie.lockAnchors){var e=cn(),t=e.section,n=e.slide,i=void 0===ze,a=void 0===ze&&void 0===n&&!je;t&&t.length&&(t&&t!==ze&&!i||a||!je&&Oe!=n)&&Tn(t,n)}}function cn(){var t,n,i=e.location.hash;if(i.length){var a=i.replace("#","").split("/"),o=i.indexOf("#/")>-1;t=o?"/"+a[1]:decodeURIComponent(a[0]);var r=o?a[2]:a[1];r&&r.length&&(n=decodeURIComponent(r))}return{section:t,slide:n}}function un(e){clearTimeout($e);var n=t.activeElement,i=e.keyCode;9===i?function(e){var n=e.shiftKey,i=t.activeElement,a=pn(rn(X(h)[0]));function o(e){return we(e),a[0]?a[0].focus():null}(function(e){var n=pn(t),i=n.indexOf(t.activeElement),a=e.shiftKey?i-1:i+1,o=n[a],r=Gt(pe(o,M)),s=$t(pe(o,m));return!r&&!s})(e)||(i?null==pe(i,h+","+h+" "+T)&&(i=o(e)):o(e),(!n&&i==a[a.length-1]||n&&i==a[0])&&we(e))}(e):Se(n,"textarea")||Se(n,"input")||Se(n,"select")||"true"===n.getAttribute("contentEditable")||""===n.getAttribute("contentEditable")||!ie.keyboardScrolling||!ie.autoScrolling||([40,38,32,33,34].indexOf(i)>-1&&we(e),Re=e.ctrlKey,$e=setTimeout(function(){!function(e){var t=e.shiftKey;if(De||!([37,39].indexOf(e.keyCode)<0))switch(e.keyCode){case 38:case 33:Ye.k.up&&xt();break;case 32:if(t&&Ye.k.up){xt();break}case 40:case 34:Ye.k.down&&_t();break;case 36:Ye.k.up&&kt(1);break;case 35:Ye.k.down&&kt(X(m).length);break;case 37:Ye.k.left&&Lt();break;case 39:Ye.k.right&&Et()}}(e)},150))}function dn(e){qe&&(Re=e.ctrlKey)}function vn(e){2==e.which&&(dt=e.pageY,Fe.addEventListener("mousemove",hn))}function fn(e){2==e.which&&Fe.removeEventListener("mousemove",hn)}function pn(e){return[].slice.call(X(et,e)).filter(function(e){return"-1"!==e.getAttribute("tabindex")&&null!==e.offsetParent})}function mn(){qe=!1,Re=!1}function hn(e){De&&(e.pageY<dt&&Ye.m.up?xt():e.pageY>dt&&Ye.m.down&&_t()),dt=e.pageY}function gn(e,t,n){var i,a,o=pe(e,m),r={slides:e,destiny:t,direction:n,destinyPos:{left:t.offsetLeft},slideIndex:ne(t),section:o,sectionIndex:ne(o,m),anchorLink:o.getAttribute("data-anchor"),slidesNav:X(C,o)[0],slideAnchor:Pn(t),prevSlide:X(T,o)[0],prevSlideIndex:ne(X(T,o)[0]),localIsResizing:He};r.xMovement=(i=r.prevSlideIndex,a=r.slideIndex,i==a?"none":i>a?"left":"right"),r.localIsResizing||(De=!1),ie.onSlideLeave&&!r.localIsResizing&&"none"!==r.xMovement&&xe(ie.onSlideLeave)&&!1===Kt("onSlideLeave",r)?je=!1:(se(t,c),le(ye(t),c),r.localIsResizing||(on(r.prevSlide),tn(t)),!ie.loopHorizontal&&ie.controlArrows&&(ke(X(D,o),0!==r.slideIndex),ke(X(Y,o),null!=ee(t))),V(o,c)&&!r.localIsResizing&&On(r.slideIndex,r.slideAnchor,r.anchorLink,r.sectionIndex),function(e,t,n){var i=t.destinyPos;if(ie.css3){var a="translate3d(-"+Math.round(i.left)+"px, 0px, 0px)";Ae.test.translate3dH[t.sectionIndex]=a,K(xn(X(P,e)),Bn(a)),Ve=setTimeout(function(){n&&bn(t)},ie.scrollingSpeed)}else Ae.test.left[t.sectionIndex]=Math.round(i.left),Nn(e,Math.round(i.left),ie.scrollingSpeed,function(){n&&bn(t)})}(e,r,!0))}function bn(e){var t,n;t=e.slidesNav,n=e.slideIndex,ie.slidesNavigation&&null!=t&&(le(X(u,t),c),se(X("a",X("li",t)[n]),c)),e.localIsResizing||(xe(ie.afterSlideLoad)&&Kt("afterSlideLoad",e),De=!0,nn(e.destiny)),je=!1}function yn(){if(wn(),Ie){var e=t.activeElement;if(!Se(e,"textarea")&&!Se(e,"input")&&!Se(e,"select")){var n=J();Math.abs(n-vt)>20*Math.max(vt,n)/100&&(Xe=setTimeout(function(){At(!0),vt=n},navigator.userAgent.match("CriOS")?50:0))}}else clearTimeout(Xe),Xe=setTimeout(function(){At(!0)},350)}function wn(){var t=ie.responsive||ie.responsiveWidth,n=ie.responsiveHeight,i=t&&e.innerWidth<t,a=n&&e.innerHeight<n;t&&n?Mt(i||a):t?Mt(i):n&&Mt(a)}function xn(e){var t="all "+ie.scrollingSpeed+"ms "+ie.easingcss3;return le(e,o),K(e,{"-webkit-transition":t,transition:t})}function _n(e){return se(e,o)}function Sn(e,t){var n,i;n=e,i=X(ie.menu)[0],ie.menu&&null!=i&&(le(X(u,i),c),se(X('[data-menuanchor="'+n+'"]',i),c)),function(e,t){ie.navigation&&null!=X(_)[0]&&(le(X(u,X(_)[0]),c),se(e?X('a[href="#'+e+'"]',X(_)[0]):X("a",X("li",X(_)[0])[t]),c))}(e,t)}function kn(e){var t=ne(X(h)[0],m),n=ne(e,m);return t==n?"none":t>n?"up":"down"}function En(e){if(!V(e,j)){var n=t.createElement("div");n.className=g,n.style.height=Ln(e)+"px",se(e,j),ve(e,n)}}function Ln(e){var t=Be;if(ie.paddingTop||ie.paddingBottom){var n=e;V(n,p)||(n=pe(e,m));var i=parseInt(getComputedStyle(n)["padding-top"])+parseInt(getComputedStyle(n)["padding-bottom"]);t=Be-i}return t}function An(e,t){t?xn(Fe):_n(Fe),K(Fe,Bn(e)),Ae.test.translate3d=e,setTimeout(function(){le(Fe,o)},10)}function Mn(e){var t=X(m+'[data-anchor="'+e+'"]',Fe)[0];if(!t){var n=void 0!==e?e-1:0;t=X(m)[n]}return t}function Tn(e,t){var n=Mn(e);if(null!=n){var i=function(e,t){var n=X(M+'[data-anchor="'+e+'"]',t)[0];return null==n&&(e=void 0!==e?e:0,n=X(M,t)[e]),n}(t,n);Pn(n)===ze||V(n,c)?zn(i):Jt(n,function(){zn(i)})}}function zn(e){null!=e&&gn(pe(e,O),e)}function On(e,t,n,i){var a="";ie.anchors.length&&!ie.lockAnchors&&(e?(null!=n&&(a=n),null==t&&(t=e),Oe=t,Rn(a+"/"+t)):null!=e?(Oe=t,Rn(n)):Rn(n)),jn()}function Rn(t){if(ie.recordHistory)location.hash=t;else if(Ie||Ce)e.history.replaceState(void 0,void 0,"#"+t);else{var n=e.location.href.split("#")[0];e.location.replace(n+"#"+t)}}function Pn(e){if(!e)return null;var t=e.getAttribute("data-anchor"),n=ne(e);return null==t&&(t=n),t}function jn(){var e=X(h)[0],t=X(T,e)[0],n=Pn(e),i=Pn(t),a=String(n);t&&(a=a+"-"+i),a=a.replace("/","-").replace("#","");var o=new RegExp("\\b\\s?"+l+"-[^\\s]+\\b","g");ge.className=ge.className.replace(o,""),se(ge,l+"-"+a)}function In(e){var t=[];return t.y=void 0!==e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,t.x=void 0!==e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,Ce&&Nt(e)&&ie.scrollBar&&void 0!==e.touches&&(t.y=e.touches[0].pageY,t.x=e.touches[0].pageX),t}function Cn(e,t){mt(0,"internal"),void 0!==t&&(He=!0),gn(pe(e,O),e),void 0!==t&&(He=!1),mt(tt.scrollingSpeed,"internal")}function Fn(e){var t=Math.round(e);if(ie.css3&&ie.autoScrolling&&!ie.scrollBar)An("translate3d(0px, -"+t+"px, 0px)",!1);else if(ie.autoScrolling&&!ie.scrollBar)K(Fe,{top:-t+"px"}),Ae.test.top=-t+"px";else{var n=Qt(t);Yn(n.element,n.options)}}function Bn(e){return{"-webkit-transform":e,"-moz-transform":e,"-ms-transform":e,transform:e}}function Hn(e,t,n){"all"!==t?Ye[n][t]=e:Object.keys(Ye[n]).forEach(function(t){Ye[n][t]=e})}function qn(e,t,n){ie[e]=t,"internal"!==n&&(tt[e]=t)}function Dn(){re||(U("error","Fullpage.js version 3 has changed its license to GPLv3 and it requires a `licenseKey` option. Read about it here:"),U("error","https://github.com/alvarotrigo/fullPage.js#options.")),V(X("html"),s)?U("error","Fullpage.js can only be initialized once and you are doing it multiple times!"):(ie.continuousVertical&&(ie.loopTop||ie.loopBottom)&&(ie.continuousVertical=!1,U("warn","Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),!ie.scrollOverflow||!ie.scrollBar&&ie.autoScrolling||U("warn","Options scrollBar:true and autoScrolling:false are mutually exclusive with scrollOverflow:true. Sections with scrollOverflow might not work well in Firefox"),!ie.continuousVertical||!ie.scrollBar&&ie.autoScrolling||(ie.continuousVertical=!1,U("warn","Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),ie.scrollOverflow&&null==ie.scrollOverflowHandler&&(ie.scrollOverflow=!1,U("error","The option `scrollOverflow:true` requires the file `scrolloverflow.min.js`. Please include it before fullPage.js.")),["fadingEffect","continuousHorizontal","scrollHorizontally","interlockedSlides","resetSliders","responsiveSlides","offsetSections","dragAndMove","scrollOverflowReset","parallax"].forEach(function(e){ie[e]&&U("warn","fullpage.js extensions require fullpage.extensions.min.js file instead of the usual fullpage.js. Requested: "+e)}),ie.anchors.forEach(function(e){var t=[].slice.call(X("[name]")).filter(function(t){return t.getAttribute("name")&&t.getAttribute("name").toLowerCase()==e.toLowerCase()}),n=[].slice.call(X("[id]")).filter(function(t){return t.getAttribute("id")&&t.getAttribute("id").toLowerCase()==e.toLowerCase()});(n.length||t.length)&&(U("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE)."),n.length&&U("error",'"'+e+'" is is being used by another element `id` property'),t.length&&U("error",'"'+e+'" is is being used by another element `name` property'))}))}function Nn(t,n,i,a){var o=function(t){return t.self!=e&&V(t,z)?t.scrollLeft:!ie.autoScrolling||ie.scrollBar?be():t.offsetTop}(t),r=n-o,s=0;Ge=!0;var l=function(){if(Ge){var c=n;s+=20,i&&(c=e.fp_easings[ie.easing](s,o,r,i)),Yn(t,c),s<i?setTimeout(l,20):void 0!==a&&a()}else s<i&&a()};l()}function Yn(t,n){!ie.autoScrolling||ie.scrollBar||t.self!=e&&V(t,z)?t.self!=e&&V(t,z)?t.scrollLeft=n:t.scrollTo(0,n):t.style.top=n+"px"}function Un(e,t){this.anchor=e.getAttribute("data-anchor"),this.item=e,this.index=ne(e,t),this.isLast=this.index===e.parentElement.querySelectorAll(t).length-1,this.isFirst=!this.index}function Xn(e){Un.call(this,e,m)}function Wn(e){Un.call(this,e,M)}Dn()}}),window.jQuery&&window.fullpage&&function(e,t){"use strict";e&&t?e.fn.fullpage=function(n){var i=new t(this[0],n);Object.keys(i).forEach(function(t){e.fn.fullpage[t]=i[t]})}:window.fp_utils.showError("error","jQuery is required to use the jQuery fullpage adapter!")}(window.jQuery,window.fullpage)},function(e,t,n){n(2),n(3),n(4),n(6)},function(e,t){const n=document.querySelector(".menu-btn"),i=document.querySelector(".menu"),a=document.querySelector(".menu-nav"),o=document.querySelectorAll(".nav-item"),r=document.querySelectorAll(".nav-link");let s=!1;function l(){s?(n.classList.remove("close"),i.classList.remove("show"),a.classList.remove("show"),o.forEach(e=>e.classList.remove("show")),s=!1):(n.classList.add("close"),i.classList.add("show"),a.classList.add("show"),o.forEach(e=>e.classList.add("show")),s=!0)}n.addEventListener("click",l),r.forEach(e=>e.addEventListener("click",l)),document.onkeydown=function(e){27==(e=e||window.event).keyCode&&l()}},function(e,t,n){"use strict";n.r(t);var i=n(0);new(n.n(i).a)("#fullpage",{menu:".menu-nav",anchors:["index","skills"],scrollingSpeed:500})},function(e,t,n){"use strict";n.r(t);n(5);particlesJS.load("particles-js","./assets/particles.json")},function(e,t){var n=function(e,t){var n=document.querySelector("#"+e+" > .particles-js-canvas-el");this.pJS={canvas:{el:n,w:n.offsetWidth,h:n.offsetHeight},particles:{number:{value:400,density:{enable:!0,value_area:800}},color:{value:"#fff"},shape:{type:"circle",stroke:{width:0,color:"#ff0000"},polygon:{nb_sides:5},image:{src:"",width:100,height:100}},opacity:{value:1,random:!1,anim:{enable:!1,speed:2,opacity_min:0,sync:!1}},size:{value:20,random:!1,anim:{enable:!1,speed:20,size_min:0,sync:!1}},line_linked:{enable:!0,distance:100,color:"#fff",opacity:1,width:1},move:{enable:!0,speed:2,direction:"none",random:!1,straight:!1,out_mode:"out",bounce:!1,attract:{enable:!1,rotateX:3e3,rotateY:3e3}},array:[]},interactivity:{detect_on:"canvas",events:{onhover:{enable:!0,mode:"grab"},onclick:{enable:!0,mode:"push"},resize:!0},modes:{grab:{distance:100,line_linked:{opacity:1}},bubble:{distance:200,size:80,duration:.4},repulse:{distance:200,duration:.4},push:{particles_nb:4},remove:{particles_nb:2}},mouse:{}},retina_detect:!1,fn:{interact:{},modes:{},vendors:{}},tmp:{}};var o=this.pJS;t&&Object.deepExtend(o,t),o.tmp.obj={size_value:o.particles.size.value,size_anim_speed:o.particles.size.anim.speed,move_speed:o.particles.move.speed,line_linked_distance:o.particles.line_linked.distance,line_linked_width:o.particles.line_linked.width,mode_grab_distance:o.interactivity.modes.grab.distance,mode_bubble_distance:o.interactivity.modes.bubble.distance,mode_bubble_size:o.interactivity.modes.bubble.size,mode_repulse_distance:o.interactivity.modes.repulse.distance},o.fn.retinaInit=function(){o.retina_detect&&window.devicePixelRatio>1?(o.canvas.pxratio=window.devicePixelRatio,o.tmp.retina=!0):(o.canvas.pxratio=1,o.tmp.retina=!1),o.canvas.w=o.canvas.el.offsetWidth*o.canvas.pxratio,o.canvas.h=o.canvas.el.offsetHeight*o.canvas.pxratio,o.particles.size.value=o.tmp.obj.size_value*o.canvas.pxratio,o.particles.size.anim.speed=o.tmp.obj.size_anim_speed*o.canvas.pxratio,o.particles.move.speed=o.tmp.obj.move_speed*o.canvas.pxratio,o.particles.line_linked.distance=o.tmp.obj.line_linked_distance*o.canvas.pxratio,o.interactivity.modes.grab.distance=o.tmp.obj.mode_grab_distance*o.canvas.pxratio,o.interactivity.modes.bubble.distance=o.tmp.obj.mode_bubble_distance*o.canvas.pxratio,o.particles.line_linked.width=o.tmp.obj.line_linked_width*o.canvas.pxratio,o.interactivity.modes.bubble.size=o.tmp.obj.mode_bubble_size*o.canvas.pxratio,o.interactivity.modes.repulse.distance=o.tmp.obj.mode_repulse_distance*o.canvas.pxratio},o.fn.canvasInit=function(){o.canvas.ctx=o.canvas.el.getContext("2d")},o.fn.canvasSize=function(){o.canvas.el.width=o.canvas.w,o.canvas.el.height=o.canvas.h,o&&o.interactivity.events.resize&&window.addEventListener("resize",function(){o.canvas.w=o.canvas.el.offsetWidth,o.canvas.h=o.canvas.el.offsetHeight,o.tmp.retina&&(o.canvas.w*=o.canvas.pxratio,o.canvas.h*=o.canvas.pxratio),o.canvas.el.width=o.canvas.w,o.canvas.el.height=o.canvas.h,o.particles.move.enable||(o.fn.particlesEmpty(),o.fn.particlesCreate(),o.fn.particlesDraw(),o.fn.vendors.densityAutoParticles()),o.fn.vendors.densityAutoParticles()})},o.fn.canvasPaint=function(){o.canvas.ctx.fillRect(0,0,o.canvas.w,o.canvas.h)},o.fn.canvasClear=function(){o.canvas.ctx.clearRect(0,0,o.canvas.w,o.canvas.h)},o.fn.particle=function(e,t,n){if(this.radius=(o.particles.size.random?Math.random():1)*o.particles.size.value,o.particles.size.anim.enable&&(this.size_status=!1,this.vs=o.particles.size.anim.speed/100,o.particles.size.anim.sync||(this.vs=this.vs*Math.random())),this.x=n?n.x:Math.random()*o.canvas.w,this.y=n?n.y:Math.random()*o.canvas.h,this.x>o.canvas.w-2*this.radius?this.x=this.x-this.radius:this.x<2*this.radius&&(this.x=this.x+this.radius),this.y>o.canvas.h-2*this.radius?this.y=this.y-this.radius:this.y<2*this.radius&&(this.y=this.y+this.radius),o.particles.move.bounce&&o.fn.vendors.checkOverlap(this,n),this.color={},"object"==typeof e.value)if(e.value instanceof Array){var a=e.value[Math.floor(Math.random()*o.particles.color.value.length)];this.color.rgb=i(a)}else null!=e.value.r&&null!=e.value.g&&null!=e.value.b&&(this.color.rgb={r:e.value.r,g:e.value.g,b:e.value.b}),null!=e.value.h&&null!=e.value.s&&null!=e.value.l&&(this.color.hsl={h:e.value.h,s:e.value.s,l:e.value.l});else"random"==e.value?this.color.rgb={r:Math.floor(256*Math.random())+0,g:Math.floor(256*Math.random())+0,b:Math.floor(256*Math.random())+0}:"string"==typeof e.value&&(this.color=e,this.color.rgb=i(this.color.value));this.opacity=(o.particles.opacity.random?Math.random():1)*o.particles.opacity.value,o.particles.opacity.anim.enable&&(this.opacity_status=!1,this.vo=o.particles.opacity.anim.speed/100,o.particles.opacity.anim.sync||(this.vo=this.vo*Math.random()));var r={};switch(o.particles.move.direction){case"top":r={x:0,y:-1};break;case"top-right":r={x:.5,y:-.5};break;case"right":r={x:1,y:-0};break;case"bottom-right":r={x:.5,y:.5};break;case"bottom":r={x:0,y:1};break;case"bottom-left":r={x:-.5,y:1};break;case"left":r={x:-1,y:0};break;case"top-left":r={x:-.5,y:-.5};break;default:r={x:0,y:0}}o.particles.move.straight?(this.vx=r.x,this.vy=r.y,o.particles.move.random&&(this.vx=this.vx*Math.random(),this.vy=this.vy*Math.random())):(this.vx=r.x+Math.random()-.5,this.vy=r.y+Math.random()-.5),this.vx_i=this.vx,this.vy_i=this.vy;var s=o.particles.shape.type;if("object"==typeof s){if(s instanceof Array){var l=s[Math.floor(Math.random()*s.length)];this.shape=l}}else this.shape=s;if("image"==this.shape){var c=o.particles.shape;this.img={src:c.image.src,ratio:c.image.width/c.image.height},this.img.ratio||(this.img.ratio=1),"svg"==o.tmp.img_type&&null!=o.tmp.source_svg&&(o.fn.vendors.createSvgImg(this),o.tmp.pushing&&(this.img.loaded=!1))}},o.fn.particle.prototype.draw=function(){var e=this;if(null!=e.radius_bubble)var t=e.radius_bubble;else t=e.radius;if(null!=e.opacity_bubble)var n=e.opacity_bubble;else n=e.opacity;if(e.color.rgb)var i="rgba("+e.color.rgb.r+","+e.color.rgb.g+","+e.color.rgb.b+","+n+")";else i="hsla("+e.color.hsl.h+","+e.color.hsl.s+"%,"+e.color.hsl.l+"%,"+n+")";switch(o.canvas.ctx.fillStyle=i,o.canvas.ctx.beginPath(),e.shape){case"circle":o.canvas.ctx.arc(e.x,e.y,t,0,2*Math.PI,!1);break;case"edge":o.canvas.ctx.rect(e.x-t,e.y-t,2*t,2*t);break;case"triangle":o.fn.vendors.drawShape(o.canvas.ctx,e.x-t,e.y+t/1.66,2*t,3,2);break;case"polygon":o.fn.vendors.drawShape(o.canvas.ctx,e.x-t/(o.particles.shape.polygon.nb_sides/3.5),e.y-t/.76,2.66*t/(o.particles.shape.polygon.nb_sides/3),o.particles.shape.polygon.nb_sides,1);break;case"star":o.fn.vendors.drawShape(o.canvas.ctx,e.x-2*t/(o.particles.shape.polygon.nb_sides/4),e.y-t/1.52,2*t*2.66/(o.particles.shape.polygon.nb_sides/3),o.particles.shape.polygon.nb_sides,2);break;case"image":;if("svg"==o.tmp.img_type)var a=e.img.obj;else a=o.tmp.img_obj;a&&o.canvas.ctx.drawImage(a,e.x-t,e.y-t,2*t,2*t/e.img.ratio)}o.canvas.ctx.closePath(),o.particles.shape.stroke.width>0&&(o.canvas.ctx.strokeStyle=o.particles.shape.stroke.color,o.canvas.ctx.lineWidth=o.particles.shape.stroke.width,o.canvas.ctx.stroke()),o.canvas.ctx.fill()},o.fn.particlesCreate=function(){for(var e=0;e<o.particles.number.value;e++)o.particles.array.push(new o.fn.particle(o.particles.color,o.particles.opacity.value))},o.fn.particlesUpdate=function(){for(var e=0;e<o.particles.array.length;e++){var t=o.particles.array[e];if(o.particles.move.enable){var n=o.particles.move.speed/2;t.x+=t.vx*n,t.y+=t.vy*n}if(o.particles.opacity.anim.enable&&(1==t.opacity_status?(t.opacity>=o.particles.opacity.value&&(t.opacity_status=!1),t.opacity+=t.vo):(t.opacity<=o.particles.opacity.anim.opacity_min&&(t.opacity_status=!0),t.opacity-=t.vo),t.opacity<0&&(t.opacity=0)),o.particles.size.anim.enable&&(1==t.size_status?(t.radius>=o.particles.size.value&&(t.size_status=!1),t.radius+=t.vs):(t.radius<=o.particles.size.anim.size_min&&(t.size_status=!0),t.radius-=t.vs),t.radius<0&&(t.radius=0)),"bounce"==o.particles.move.out_mode)var i={x_left:t.radius,x_right:o.canvas.w,y_top:t.radius,y_bottom:o.canvas.h};else i={x_left:-t.radius,x_right:o.canvas.w+t.radius,y_top:-t.radius,y_bottom:o.canvas.h+t.radius};switch(t.x-t.radius>o.canvas.w?(t.x=i.x_left,t.y=Math.random()*o.canvas.h):t.x+t.radius<0&&(t.x=i.x_right,t.y=Math.random()*o.canvas.h),t.y-t.radius>o.canvas.h?(t.y=i.y_top,t.x=Math.random()*o.canvas.w):t.y+t.radius<0&&(t.y=i.y_bottom,t.x=Math.random()*o.canvas.w),o.particles.move.out_mode){case"bounce":t.x+t.radius>o.canvas.w?t.vx=-t.vx:t.x-t.radius<0&&(t.vx=-t.vx),t.y+t.radius>o.canvas.h?t.vy=-t.vy:t.y-t.radius<0&&(t.vy=-t.vy)}if(a("grab",o.interactivity.events.onhover.mode)&&o.fn.modes.grabParticle(t),(a("bubble",o.interactivity.events.onhover.mode)||a("bubble",o.interactivity.events.onclick.mode))&&o.fn.modes.bubbleParticle(t),(a("repulse",o.interactivity.events.onhover.mode)||a("repulse",o.interactivity.events.onclick.mode))&&o.fn.modes.repulseParticle(t),o.particles.line_linked.enable||o.particles.move.attract.enable)for(var r=e+1;r<o.particles.array.length;r++){var s=o.particles.array[r];o.particles.line_linked.enable&&o.fn.interact.linkParticles(t,s),o.particles.move.attract.enable&&o.fn.interact.attractParticles(t,s),o.particles.move.bounce&&o.fn.interact.bounceParticles(t,s)}}},o.fn.particlesDraw=function(){o.canvas.ctx.clearRect(0,0,o.canvas.w,o.canvas.h),o.fn.particlesUpdate();for(var e=0;e<o.particles.array.length;e++){o.particles.array[e].draw()}},o.fn.particlesEmpty=function(){o.particles.array=[]},o.fn.particlesRefresh=function(){cancelRequestAnimFrame(o.fn.checkAnimFrame),cancelRequestAnimFrame(o.fn.drawAnimFrame),o.tmp.source_svg=void 0,o.tmp.img_obj=void 0,o.tmp.count_svg=0,o.fn.particlesEmpty(),o.fn.canvasClear(),o.fn.vendors.start()},o.fn.interact.linkParticles=function(e,t){var n=e.x-t.x,i=e.y-t.y,a=Math.sqrt(n*n+i*i);if(a<=o.particles.line_linked.distance){var r=o.particles.line_linked.opacity-a/(1/o.particles.line_linked.opacity)/o.particles.line_linked.distance;if(r>0){var s=o.particles.line_linked.color_rgb_line;o.canvas.ctx.strokeStyle="rgba("+s.r+","+s.g+","+s.b+","+r+")",o.canvas.ctx.lineWidth=o.particles.line_linked.width,o.canvas.ctx.beginPath(),o.canvas.ctx.moveTo(e.x,e.y),o.canvas.ctx.lineTo(t.x,t.y),o.canvas.ctx.stroke(),o.canvas.ctx.closePath()}}},o.fn.interact.attractParticles=function(e,t){var n=e.x-t.x,i=e.y-t.y;if(Math.sqrt(n*n+i*i)<=o.particles.line_linked.distance){var a=n/(1e3*o.particles.move.attract.rotateX),r=i/(1e3*o.particles.move.attract.rotateY);e.vx-=a,e.vy-=r,t.vx+=a,t.vy+=r}},o.fn.interact.bounceParticles=function(e,t){var n=e.x-t.x,i=e.y-t.y;Math.sqrt(n*n+i*i)<=e.radius+t.radius&&(e.vx=-e.vx,e.vy=-e.vy,t.vx=-t.vx,t.vy=-t.vy)},o.fn.modes.pushParticles=function(e,t){o.tmp.pushing=!0;for(var n=0;n<e;n++)o.particles.array.push(new o.fn.particle(o.particles.color,o.particles.opacity.value,{x:t?t.pos_x:Math.random()*o.canvas.w,y:t?t.pos_y:Math.random()*o.canvas.h})),n==e-1&&(o.particles.move.enable||o.fn.particlesDraw(),o.tmp.pushing=!1)},o.fn.modes.removeParticles=function(e){o.particles.array.splice(0,e),o.particles.move.enable||o.fn.particlesDraw()},o.fn.modes.bubbleParticle=function(e){if(o.interactivity.events.onhover.enable&&a("bubble",o.interactivity.events.onhover.mode)){var t=e.x-o.interactivity.mouse.pos_x,n=e.y-o.interactivity.mouse.pos_y,i=1-(u=Math.sqrt(t*t+n*n))/o.interactivity.modes.bubble.distance;function r(){e.opacity_bubble=e.opacity,e.radius_bubble=e.radius}if(u<=o.interactivity.modes.bubble.distance){if(i>=0&&"mousemove"==o.interactivity.status){if(o.interactivity.modes.bubble.size!=o.particles.size.value)if(o.interactivity.modes.bubble.size>o.particles.size.value){(l=e.radius+o.interactivity.modes.bubble.size*i)>=0&&(e.radius_bubble=l)}else{var s=e.radius-o.interactivity.modes.bubble.size,l=e.radius-s*i;e.radius_bubble=l>0?l:0}var c;if(o.interactivity.modes.bubble.opacity!=o.particles.opacity.value)if(o.interactivity.modes.bubble.opacity>o.particles.opacity.value)(c=o.interactivity.modes.bubble.opacity*i)>e.opacity&&c<=o.interactivity.modes.bubble.opacity&&(e.opacity_bubble=c);else(c=e.opacity-(o.particles.opacity.value-o.interactivity.modes.bubble.opacity)*i)<e.opacity&&c>=o.interactivity.modes.bubble.opacity&&(e.opacity_bubble=c)}}else r();"mouseleave"==o.interactivity.status&&r()}else if(o.interactivity.events.onclick.enable&&a("bubble",o.interactivity.events.onclick.mode)){if(o.tmp.bubble_clicking){t=e.x-o.interactivity.mouse.click_pos_x,n=e.y-o.interactivity.mouse.click_pos_y;var u=Math.sqrt(t*t+n*n),d=((new Date).getTime()-o.interactivity.mouse.click_time)/1e3;d>o.interactivity.modes.bubble.duration&&(o.tmp.bubble_duration_end=!0),d>2*o.interactivity.modes.bubble.duration&&(o.tmp.bubble_clicking=!1,o.tmp.bubble_duration_end=!1)}function v(t,n,i,a,r){if(t!=n)if(o.tmp.bubble_duration_end)null!=i&&(l=t+(t-(a-d*(a-t)/o.interactivity.modes.bubble.duration)),"size"==r&&(e.radius_bubble=l),"opacity"==r&&(e.opacity_bubble=l));else if(u<=o.interactivity.modes.bubble.distance){if(null!=i)var s=i;else s=a;if(s!=t){var l=a-d*(a-t)/o.interactivity.modes.bubble.duration;"size"==r&&(e.radius_bubble=l),"opacity"==r&&(e.opacity_bubble=l)}}else"size"==r&&(e.radius_bubble=void 0),"opacity"==r&&(e.opacity_bubble=void 0)}o.tmp.bubble_clicking&&(v(o.interactivity.modes.bubble.size,o.particles.size.value,e.radius_bubble,e.radius,"size"),v(o.interactivity.modes.bubble.opacity,o.particles.opacity.value,e.opacity_bubble,e.opacity,"opacity"))}},o.fn.modes.repulseParticle=function(e){if(o.interactivity.events.onhover.enable&&a("repulse",o.interactivity.events.onhover.mode)&&"mousemove"==o.interactivity.status){var t=e.x-o.interactivity.mouse.pos_x,n=e.y-o.interactivity.mouse.pos_y,i=Math.sqrt(t*t+n*n),r={x:t/i,y:n/i},s=o.interactivity.modes.repulse.distance,l=(p=1/s*(-1*Math.pow(i/s,2)+1)*s*100,m=0,h=50,Math.min(Math.max(p,m),h)),c={x:e.x+r.x*l,y:e.y+r.y*l};"bounce"==o.particles.move.out_mode?(c.x-e.radius>0&&c.x+e.radius<o.canvas.w&&(e.x=c.x),c.y-e.radius>0&&c.y+e.radius<o.canvas.h&&(e.y=c.y)):(e.x=c.x,e.y=c.y)}else if(o.interactivity.events.onclick.enable&&a("repulse",o.interactivity.events.onclick.mode))if(o.tmp.repulse_finish||(o.tmp.repulse_count++,o.tmp.repulse_count==o.particles.array.length&&(o.tmp.repulse_finish=!0)),o.tmp.repulse_clicking){s=Math.pow(o.interactivity.modes.repulse.distance/6,3);var u=o.interactivity.mouse.click_pos_x-e.x,d=o.interactivity.mouse.click_pos_y-e.y,v=u*u+d*d,f=-s/v*1;v<=s&&function(){var t=Math.atan2(d,u);if(e.vx=f*Math.cos(t),e.vy=f*Math.sin(t),"bounce"==o.particles.move.out_mode){var n={x:e.x+e.vx,y:e.y+e.vy};n.x+e.radius>o.canvas.w?e.vx=-e.vx:n.x-e.radius<0&&(e.vx=-e.vx),n.y+e.radius>o.canvas.h?e.vy=-e.vy:n.y-e.radius<0&&(e.vy=-e.vy)}}()}else 0==o.tmp.repulse_clicking&&(e.vx=e.vx_i,e.vy=e.vy_i);var p,m,h},o.fn.modes.grabParticle=function(e){if(o.interactivity.events.onhover.enable&&"mousemove"==o.interactivity.status){var t=e.x-o.interactivity.mouse.pos_x,n=e.y-o.interactivity.mouse.pos_y,i=Math.sqrt(t*t+n*n);if(i<=o.interactivity.modes.grab.distance){var a=o.interactivity.modes.grab.line_linked.opacity-i/(1/o.interactivity.modes.grab.line_linked.opacity)/o.interactivity.modes.grab.distance;if(a>0){var r=o.particles.line_linked.color_rgb_line;o.canvas.ctx.strokeStyle="rgba("+r.r+","+r.g+","+r.b+","+a+")",o.canvas.ctx.lineWidth=o.particles.line_linked.width,o.canvas.ctx.beginPath(),o.canvas.ctx.moveTo(e.x,e.y),o.canvas.ctx.lineTo(o.interactivity.mouse.pos_x,o.interactivity.mouse.pos_y),o.canvas.ctx.stroke(),o.canvas.ctx.closePath()}}}},o.fn.vendors.eventsListeners=function(){"window"==o.interactivity.detect_on?o.interactivity.el=window:o.interactivity.el=o.canvas.el,(o.interactivity.events.onhover.enable||o.interactivity.events.onclick.enable)&&(o.interactivity.el.addEventListener("mousemove",function(e){if(o.interactivity.el==window)var t=e.clientX,n=e.clientY;else t=e.offsetX||e.clientX,n=e.offsetY||e.clientY;o.interactivity.mouse.pos_x=t,o.interactivity.mouse.pos_y=n,o.tmp.retina&&(o.interactivity.mouse.pos_x*=o.canvas.pxratio,o.interactivity.mouse.pos_y*=o.canvas.pxratio),o.interactivity.status="mousemove"}),o.interactivity.el.addEventListener("mouseleave",function(e){o.interactivity.mouse.pos_x=null,o.interactivity.mouse.pos_y=null,o.interactivity.status="mouseleave"})),o.interactivity.events.onclick.enable&&o.interactivity.el.addEventListener("click",function(){if(o.interactivity.mouse.click_pos_x=o.interactivity.mouse.pos_x,o.interactivity.mouse.click_pos_y=o.interactivity.mouse.pos_y,o.interactivity.mouse.click_time=(new Date).getTime(),o.interactivity.events.onclick.enable)switch(o.interactivity.events.onclick.mode){case"push":o.particles.move.enable?o.fn.modes.pushParticles(o.interactivity.modes.push.particles_nb,o.interactivity.mouse):1==o.interactivity.modes.push.particles_nb?o.fn.modes.pushParticles(o.interactivity.modes.push.particles_nb,o.interactivity.mouse):o.interactivity.modes.push.particles_nb>1&&o.fn.modes.pushParticles(o.interactivity.modes.push.particles_nb);break;case"remove":o.fn.modes.removeParticles(o.interactivity.modes.remove.particles_nb);break;case"bubble":o.tmp.bubble_clicking=!0;break;case"repulse":o.tmp.repulse_clicking=!0,o.tmp.repulse_count=0,o.tmp.repulse_finish=!1,setTimeout(function(){o.tmp.repulse_clicking=!1},1e3*o.interactivity.modes.repulse.duration)}})},o.fn.vendors.densityAutoParticles=function(){if(o.particles.number.density.enable){var e=o.canvas.el.width*o.canvas.el.height/1e3;o.tmp.retina&&(e/=2*o.canvas.pxratio);var t=e*o.particles.number.value/o.particles.number.density.value_area,n=o.particles.array.length-t;n<0?o.fn.modes.pushParticles(Math.abs(n)):o.fn.modes.removeParticles(n)}},o.fn.vendors.checkOverlap=function(e,t){for(var n=0;n<o.particles.array.length;n++){var i=o.particles.array[n],a=e.x-i.x,r=e.y-i.y;Math.sqrt(a*a+r*r)<=e.radius+i.radius&&(e.x=t?t.x:Math.random()*o.canvas.w,e.y=t?t.y:Math.random()*o.canvas.h,o.fn.vendors.checkOverlap(e))}},o.fn.vendors.createSvgImg=function(e){var t=o.tmp.source_svg.replace(/#([0-9A-F]{3,6})/gi,function(t,n,i,a){if(e.color.rgb)var o="rgba("+e.color.rgb.r+","+e.color.rgb.g+","+e.color.rgb.b+","+e.opacity+")";else o="hsla("+e.color.hsl.h+","+e.color.hsl.s+"%,"+e.color.hsl.l+"%,"+e.opacity+")";return o}),n=new Blob([t],{type:"image/svg+xml;charset=utf-8"}),i=window.URL||window.webkitURL||window,a=i.createObjectURL(n),r=new Image;r.addEventListener("load",function(){e.img.obj=r,e.img.loaded=!0,i.revokeObjectURL(a),o.tmp.count_svg++}),r.src=a},o.fn.vendors.destroypJS=function(){cancelAnimationFrame(o.fn.drawAnimFrame),n.remove(),pJSDom=null},o.fn.vendors.drawShape=function(e,t,n,i,a,o){var r=a*o,s=a/o,l=180*(s-2)/s,c=Math.PI-Math.PI*l/180;e.save(),e.beginPath(),e.translate(t,n),e.moveTo(0,0);for(var u=0;u<r;u++)e.lineTo(i,0),e.translate(i,0),e.rotate(c);e.fill(),e.restore()},o.fn.vendors.exportImg=function(){window.open(o.canvas.el.toDataURL("image/png"),"_blank")},o.fn.vendors.loadImg=function(e){if(o.tmp.img_error=void 0,""!=o.particles.shape.image.src)if("svg"==e){var t=new XMLHttpRequest;t.open("GET",o.particles.shape.image.src),t.onreadystatechange=function(e){4==t.readyState&&(200==t.status?(o.tmp.source_svg=e.currentTarget.response,o.fn.vendors.checkBeforeDraw()):(console.log("Error pJS - Image not found"),o.tmp.img_error=!0))},t.send()}else{var n=new Image;n.addEventListener("load",function(){o.tmp.img_obj=n,o.fn.vendors.checkBeforeDraw()}),n.src=o.particles.shape.image.src}else console.log("Error pJS - No image.src"),o.tmp.img_error=!0},o.fn.vendors.draw=function(){"image"==o.particles.shape.type?"svg"==o.tmp.img_type?o.tmp.count_svg>=o.particles.number.value?(o.fn.particlesDraw(),o.particles.move.enable?o.fn.drawAnimFrame=requestAnimFrame(o.fn.vendors.draw):cancelRequestAnimFrame(o.fn.drawAnimFrame)):o.tmp.img_error||(o.fn.drawAnimFrame=requestAnimFrame(o.fn.vendors.draw)):null!=o.tmp.img_obj?(o.fn.particlesDraw(),o.particles.move.enable?o.fn.drawAnimFrame=requestAnimFrame(o.fn.vendors.draw):cancelRequestAnimFrame(o.fn.drawAnimFrame)):o.tmp.img_error||(o.fn.drawAnimFrame=requestAnimFrame(o.fn.vendors.draw)):(o.fn.particlesDraw(),o.particles.move.enable?o.fn.drawAnimFrame=requestAnimFrame(o.fn.vendors.draw):cancelRequestAnimFrame(o.fn.drawAnimFrame))},o.fn.vendors.checkBeforeDraw=function(){"image"==o.particles.shape.type?"svg"==o.tmp.img_type&&null==o.tmp.source_svg?o.tmp.checkAnimFrame=requestAnimFrame(check):(cancelRequestAnimFrame(o.tmp.checkAnimFrame),o.tmp.img_error||(o.fn.vendors.init(),o.fn.vendors.draw())):(o.fn.vendors.init(),o.fn.vendors.draw())},o.fn.vendors.init=function(){o.fn.retinaInit(),o.fn.canvasInit(),o.fn.canvasSize(),o.fn.canvasPaint(),o.fn.particlesCreate(),o.fn.vendors.densityAutoParticles(),o.particles.line_linked.color_rgb_line=i(o.particles.line_linked.color)},o.fn.vendors.start=function(){a("image",o.particles.shape.type)?(o.tmp.img_type=o.particles.shape.image.src.substr(o.particles.shape.image.src.length-3),o.fn.vendors.loadImg(o.tmp.img_type)):o.fn.vendors.checkBeforeDraw()},o.fn.vendors.eventsListeners(),o.fn.vendors.start()};function i(e){e=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,function(e,t,n,i){return t+t+n+n+i+i});var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return t?{r:parseInt(t[1],16),g:parseInt(t[2],16),b:parseInt(t[3],16)}:null}function a(e,t){return t.indexOf(e)>-1}Object.deepExtend=function(e,t){for(var n in t)t[n]&&t[n].constructor&&t[n].constructor===Object?(e[n]=e[n]||{},arguments.callee(e[n],t[n])):e[n]=t[n];return e},window.requestAnimFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)},window.cancelRequestAnimFrame=window.cancelAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.msCancelRequestAnimationFrame||clearTimeout,window.pJSDom=[],window.particlesJS=function(e,t){"string"!=typeof e&&(t=e,e="particles-js"),e||(e="particles-js");var i=document.getElementById(e),a=i.getElementsByClassName("particles-js-canvas-el");if(a.length)for(;a.length>0;)i.removeChild(a[0]);var o=document.createElement("canvas");o.className="particles-js-canvas-el",o.style.width="100%",o.style.height="100%",null!=document.getElementById(e).appendChild(o)&&pJSDom.push(new n(e,t))},window.particlesJS.load=function(e,t,n){var i=new XMLHttpRequest;i.open("GET",t),i.onreadystatechange=function(t){if(4==i.readyState)if(200==i.status){var a=JSON.parse(t.currentTarget.response);window.particlesJS(e,a),n&&n()}else console.log("Error pJS - XMLHttpRequest status: "+i.status),console.log("Error pJS - File config not found")},i.send()}},function(e,t){!function(e,t){const n=40+Math.floor(100*Math.random()),i=2e3,a=0,o=1;var r,s=a,l=0,c=0;function u(){r=setInterval(d,n)}function d(){const n=t[l];s==a?++c==n.length&&(s=o,clearInterval(r),setTimeout(u,i)):s==o&&0==--c&&(c=0,s=a,++l==t.length&&(l=0));const d=n.substring(0,c);e.textContent=d}u()}(document.querySelector(".typing"),["<web />","javascript();","<?php ?>","sass {}","<React />"])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,